import { getTypesForEIP712Domain, hashTypedData, validateTypedData } from "viem";
import { isKernelV2 } from "./isKernelV2.js";
import { wrapMessageHash } from "./wrapMessageHash.js";
export async function signTypedData(parameters) {
    const { owner, accountAddress, kernelVersion: accountVersion, chainId, ...typedData } = parameters;
    if (isKernelV2(accountVersion)) {
        return owner.signTypedData({
            ...typedData
        });
    }
    const { message, primaryType, types: _types, domain } = typedData;
    const types = {
        EIP712Domain: getTypesForEIP712Domain({
            domain: domain
        }),
        ..._types
    };
    // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc
    // as we can't statically check this with TypeScript.
    validateTypedData({
        domain,
        message,
        primaryType,
        types
    });
    const typedHash = hashTypedData({ message, primaryType, types, domain });
    const wrappedMessageHash = wrapMessageHash(typedHash, {
        kernelVersion: accountVersion,
        accountAddress,
        chainId: chainId
    });
    return owner.signMessage({
        message: { raw: wrappedMessageHash }
    });
}
//# sourceMappingURL=signTypedData.js.map