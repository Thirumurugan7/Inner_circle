"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toBiconomySmartAccount = void 0;
const viem_1 = require("viem");
const account_abstraction_1 = require("viem/account-abstraction");
const actions_1 = require("viem/actions");
const getAccountNonce_1 = require("../../actions/public/getAccountNonce.js");
const getSenderAddress_1 = require("../../actions/public/getSenderAddress.js");
const toOwner_1 = require("../../utils/toOwner.js");
const BiconomySmartAccountAbi_1 = require("./abi/BiconomySmartAccountAbi.js");
const BICONOMY_ADDRESSES = {
    ECDSA_OWNERSHIP_REGISTRY_MODULE: "0x0000001c5b32F37F5beA87BDD5374eB2aC54eA8e",
    FACTORY_ADDRESS: "0x000000a56Aaca3e9a4C479ea6b6CD0DbcB6634F5"
};
const getAccountInitCode = async ({ owner, index, ecdsaModuleAddress }) => {
    if (!owner)
        throw new Error("Owner account not found");
    const ecdsaOwnershipInitData = (0, viem_1.encodeFunctionData)({
        abi: BiconomySmartAccountAbi_1.BiconomyAbi,
        functionName: "initForSmartAccount",
        args: [owner]
    });
    return (0, viem_1.encodeFunctionData)({
        abi: BiconomySmartAccountAbi_1.FactoryAbi,
        functionName: "deployCounterFactualAccount",
        args: [ecdsaModuleAddress, ecdsaOwnershipInitData, index]
    });
};
async function toBiconomySmartAccount(parameters) {
    const { owners, client, index = 0n, address } = parameters;
    const localOwner = await (0, toOwner_1.toOwner)({ owner: owners[0] });
    const entryPoint = {
        address: parameters.entryPoint?.address ?? account_abstraction_1.entryPoint06Address,
        abi: account_abstraction_1.entryPoint06Abi,
        version: parameters.entryPoint?.version ?? "0.6"
    };
    const factoryAddress = parameters.factoryAddress ?? BICONOMY_ADDRESSES.FACTORY_ADDRESS;
    let accountAddress = address;
    const ecdsaModuleAddress = parameters.ecdsaModuleAddress ??
        BICONOMY_ADDRESSES.ECDSA_OWNERSHIP_REGISTRY_MODULE;
    const getFactoryArgs = async () => {
        return {
            factory: factoryAddress,
            factoryData: await getAccountInitCode({
                owner: localOwner.address,
                index,
                ecdsaModuleAddress
            })
        };
    };
    return (0, account_abstraction_1.toSmartAccount)({
        client,
        entryPoint,
        getFactoryArgs,
        async getAddress() {
            if (accountAddress)
                return accountAddress;
            const { factory, factoryData } = await getFactoryArgs();
            accountAddress = await (0, getSenderAddress_1.getSenderAddress)(client, {
                factory,
                factoryData,
                entryPointAddress: entryPoint.address
            });
            return accountAddress;
        },
        async getNonce(args) {
            const address = await this.getAddress();
            return (0, getAccountNonce_1.getAccountNonce)(client, {
                address,
                entryPointAddress: entryPoint.address,
                key: args?.key ?? parameters?.nonceKey
            });
        },
        encodeCalls: async (calls) => {
            if (calls.length > 1) {
                return (0, viem_1.encodeFunctionData)({
                    abi: BiconomySmartAccountAbi_1.BiconomyAbi,
                    functionName: "executeBatch_y6U",
                    args: [
                        calls.map((a) => a.to),
                        calls.map((a) => a.value ?? 0n),
                        calls.map((a) => a.data ?? "0x")
                    ]
                });
            }
            const { to, value, data } = calls[0];
            return (0, viem_1.encodeFunctionData)({
                abi: BiconomySmartAccountAbi_1.BiconomyAbi,
                functionName: "execute_ncC",
                args: [to, value ?? 0n, data ?? "0x"]
            });
        },
        async getStubSignature() {
            const dynamicPart = ecdsaModuleAddress.substring(2).padEnd(40, "0");
            return `0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000${dynamicPart}000000000000000000000000000000000000000000000000000000000000004181d4b4981670cb18f99f0b4a66446df1bf5b204d24cfcb659bf38ba27a4359b5711649ec2423c5e1247245eba2964679b6a1dbb85c992ae40b9b00c6935b02ff1b00000000000000000000000000000000000000000000000000000000000000`;
        },
        async sign({ hash }) {
            return this.signMessage({ message: hash });
        },
        async signMessage({ message }) {
            let signature = await localOwner.signMessage({
                message
            });
            const potentiallyIncorrectV = Number.parseInt(signature.slice(-2), 16);
            if (![27, 28].includes(potentiallyIncorrectV)) {
                const correctV = potentiallyIncorrectV + 27;
                signature = (signature.slice(0, -2) +
                    correctV.toString(16));
            }
            return (0, viem_1.encodeAbiParameters)([{ type: "bytes" }, { type: "address" }], [signature, ecdsaModuleAddress]);
        },
        async signTypedData(typedData) {
            let signature = await localOwner.signTypedData(typedData);
            const potentiallyIncorrectV = Number.parseInt(signature.slice(-2), 16);
            if (![27, 28].includes(potentiallyIncorrectV)) {
                const correctV = potentiallyIncorrectV + 27;
                signature = (signature.slice(0, -2) +
                    correctV.toString(16));
            }
            return (0, viem_1.encodeAbiParameters)([{ type: "bytes" }, { type: "address" }], [signature, ecdsaModuleAddress]);
        },
        async signUserOperation(parameters) {
            const { chainId = client.chain?.id, ...userOperation } = parameters;
            if (!chainId)
                throw new Error("Chain id not found");
            const hash = (0, account_abstraction_1.getUserOperationHash)({
                userOperation: {
                    ...userOperation,
                    sender: userOperation.sender ?? (await this.getAddress()),
                    signature: "0x"
                },
                entryPointAddress: entryPoint.address,
                entryPointVersion: entryPoint.version,
                chainId: chainId
            });
            const signature = await (0, actions_1.signMessage)(client, {
                account: localOwner,
                message: { raw: hash }
            });
            const signatureWithModuleAddress = (0, viem_1.encodeAbiParameters)((0, viem_1.parseAbiParameters)("bytes, address"), [signature, ecdsaModuleAddress]);
            return signatureWithModuleAddress;
        }
    });
}
exports.toBiconomySmartAccount = toBiconomySmartAccount;
//# sourceMappingURL=toBiconomySmartAccount.js.map