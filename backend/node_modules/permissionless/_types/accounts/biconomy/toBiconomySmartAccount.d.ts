import type { Account, Assign, Chain, EIP1193Provider, OneOf, Prettify, Transport, WalletClient } from "viem";
import { type Address, type Client, type LocalAccount } from "viem";
import { type SmartAccount, type SmartAccountImplementation, entryPoint06Abi } from "viem/account-abstraction";
export type ToBiconomySmartAccountParameters = Prettify<{
    client: Client;
    owners: [
        OneOf<EIP1193Provider | WalletClient<Transport, Chain | undefined, Account> | LocalAccount>
    ];
    address?: Address | undefined;
    entryPoint: {
        address: Address;
        version: "0.6";
    };
    nonceKey?: bigint;
    index?: bigint;
    factoryAddress?: Address;
    ecdsaModuleAddress?: Address;
}>;
export type BiconomySmartAccountImplementation = Assign<SmartAccountImplementation<typeof entryPoint06Abi, "0.6">, {
    sign: NonNullable<SmartAccountImplementation["sign"]>;
}>;
export type ToBiconomySmartAccountReturnType = Prettify<SmartAccount<BiconomySmartAccountImplementation>>;
/**
 * Build a Biconomy modular smart account from a private key, that use the ECDSA signer behind the scene
 * @param client
 * @param privateKey
 * @param entryPoint
 * @param index
 * @param factoryAddress
 * @param ecdsaModuleAddress
 */
export declare function toBiconomySmartAccount(parameters: ToBiconomySmartAccountParameters): Promise<ToBiconomySmartAccountReturnType>;
//# sourceMappingURL=toBiconomySmartAccount.d.ts.map