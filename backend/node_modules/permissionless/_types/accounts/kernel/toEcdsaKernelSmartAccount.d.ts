import type { Account, Assign, Chain, EIP1193Provider, OneOf, Transport, WalletClient } from "viem";
import { type Address, type Client, type LocalAccount } from "viem";
import { type SmartAccount, type SmartAccountImplementation, entryPoint06Abi, entryPoint07Abi } from "viem/account-abstraction";
export type KernelVersion<entryPointVersion extends "0.6" | "0.7"> = entryPointVersion extends "0.6" ? "0.2.1" | "0.2.2" | "0.2.3" | "0.2.4" : "0.3.0-beta" | "0.3.1";
/**
 * Default addresses map for different kernel smart account versions
 */
export declare const KERNEL_VERSION_TO_ADDRESSES_MAP: {
    [key in KernelVersion<"0.6" | "0.7">]: {
        ECDSA_VALIDATOR: Address;
        ACCOUNT_LOGIC: Address;
        FACTORY_ADDRESS: Address;
        META_FACTORY_ADDRESS?: Address;
    };
};
export declare const getEcdsaRootIdentifierForKernelV3: (validatorAddress: Address) => `0x${string}`;
export type ToEcdsaKernelSmartAccountParameters<entryPointVersion extends "0.6" | "0.7", kernelVersion extends KernelVersion<entryPointVersion>> = {
    client: Client;
    owners: [
        OneOf<EIP1193Provider | WalletClient<Transport, Chain | undefined, Account> | LocalAccount>
    ];
    entryPoint?: {
        address: Address;
        version: entryPointVersion;
    };
    address?: Address;
    version?: kernelVersion;
    index?: bigint;
    factoryAddress?: Address;
    metaFactoryAddress?: Address;
    accountLogicAddress?: Address;
    ecdsaValidatorAddress?: Address;
    nonceKey?: bigint;
};
export type EcdsaKernelSmartAccountImplementation<entryPointVersion extends "0.6" | "0.7" = "0.7"> = Assign<SmartAccountImplementation<entryPointVersion extends "0.6" ? typeof entryPoint06Abi : typeof entryPoint07Abi, entryPointVersion>, {
    sign: NonNullable<SmartAccountImplementation["sign"]>;
}>;
export type ToEcdsaKernelSmartAccountReturnType<entryPointVersion extends "0.6" | "0.7" = "0.7"> = SmartAccount<EcdsaKernelSmartAccountImplementation<entryPointVersion>>;
/**
 * Build a kernel smart account from a private key, that use the ECDSA signer behind the scene
 * @param client
 * @param privateKey
 * @param entryPoint
 * @param index
 * @param factoryAddress
 * @param accountLogicAddress
 * @param ecdsaValidatorAddress
 */
export declare function toEcdsaKernelSmartAccount<entryPointVersion extends "0.6" | "0.7", kernelVersion extends KernelVersion<entryPointVersion>>(parameters: ToEcdsaKernelSmartAccountParameters<entryPointVersion, kernelVersion>): Promise<ToEcdsaKernelSmartAccountReturnType<entryPointVersion>>;
//# sourceMappingURL=toEcdsaKernelSmartAccount.d.ts.map